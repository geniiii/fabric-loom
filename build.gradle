plugins {
	id 'maven-publish'
	id 'java-gradle-plugin'
	id 'idea'
	id 'eclipse'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'net.fabricmc'
archivesBaseName = project.name
version = '0.2.7-SNAPSHOT'

def build = "local"
def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	build = "jenkins #${ENV.BUILD_NUMBER}"
} else {
	def process = 'git rev-parse --short HEAD'.execute()
    process.waitFor()
    if (!process.exitValue()) build = "SinÂ² ${process.text.trim()}" 
}

repositories {
	jcenter()
	maven {
		name = "Fabric"
		url = 'https://maven.fabricmc.net/'
	}
	maven { 
		name = "Jitpack"
		url 'https://jitpack.io/'
	}
	maven {
		url "https://repo.gradle.org/gradle/libs-releases-local"
	}
}

dependencies {
	compileOnly "org.gradle:gradle-core-api:6.1"

	// libraries
	implementation ('commons-io:commons-io:2.6')
	implementation ('org.zeroturnaround:zt-zip:1.13')
	implementation ('com.google.code.gson:gson:2.8.5')
	implementation ('com.google.guava:guava:28.0-jre')
	implementation ('org.csveed:csveed:0.6.0')

	// game handling utils
	implementation ('net.fabricmc:stitch:0.4.3.71') {
		exclude module: 'enigma'
		exclude module: 'tiny-mappings-parser'
	}
	implementation 'com.github.Chocohead:Tiny-Mappings-Parser:d96d407'
	implementation ('com.github.Chocohead:OptiSine:cc6da75') {//Keep consistent with Openfine.VERSION
		transitive = false
	}

	// tinyfile management
	implementation ('com.github.Chocohead:tiny-remapper:15ddc5f') {
		transitive = false
	}
	implementation 'cuchaz:enigma:0.15.152:lib'
	implementation 'com.bulenkov:darcula:2018.2'

	// decompilers
	implementation ('net.fabricmc:procyon-fabric-compilertools:0.5.35.+')
	implementation ('com.github.Chocohead:ForgedFlower:c864803')

	// source code remapping
	implementation ('org.cadixdev:mercury:0.1.0.fabric-SNAPSHOT')
}

jar {
	manifest {
		attributes 'Implementation-Title': "Loom $version"
		attributes 'Implementation-Version': version + " Build(" + build + ")"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'

license {
	exclude '**/loom/mcp/**/*.java'
	exclude '**/loom/YarnGithubResolver.java'
	exclude '**/loom/util/DownloadUtil.java'
	exclude '**/loom/task/RemappingJar.java'
	exclude '**/loom/util/AccessTransformerHelper.java'
	exclude '**/loom/dependencies/ArtifactInfo.java'
	exclude '**/loom/dependencies/ComputedDependency.java'
	exclude '**/loom/dependencies/DependencyGraph.java'
	exclude '**/loom/dependencies/LogicalDependencyProvider.java'
	exclude '**/loom/dependencies/PhysicalDependencyProvider.java'
	exclude '**/loom/providers/MappingsProvider.java'
	exclude '**/loom/providers/SnappyRemapper.java'
	exclude '**/loom/providers/StackedMappingsProvider.java'
	exclude '**/loom/providers/mappings/*.java'
	exclude '**/loom/providers/openfine/*.java'
	exclude '**/loom/util/ThrowingIntObjConsumer.java'
	exclude '**/loom/task/fernflower/JavadocProvider.java'
}

wrapper {
	gradleVersion = '4.9'
}

gradlePlugin {
	plugins {
		fabricLoom {
			id = "fabric-loom"
			implementationClass = "net.fabricmc.loom.LoomGradlePlugin"
		}
	}
}

publishing {
	publications {
		plugin(MavenPublication) { publication ->
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components["java"]

			artifact sourcesJar
			//artifact javadocJar
		}
	}
	repositories {
		maven {
			if (project.hasProperty('mavenPass')) {
				url "http://mavenupload.modmuss50.me/"
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			} else {
				url "$buildDir/repo"
			}
		}
	}
}
